// lex.yy.cpp generated by reflex 1.5.8 from restorer.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_bison               true
#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               yyFlexLexer
#define REFLEX_OPTION_outfile             "lex.yy.cpp"
#define REFLEX_OPTION_prefix              yy
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define YY_NUM_RULES (13)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE ABSTRACT LEXER CLASS                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/flexlexer.h>
#undef yytext
#undef yyleng
#undef yylineno
typedef reflex::FlexLexer<reflex::Matcher> FlexLexer;

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class yyFlexLexer : public FlexLexer {
 public:
  yyFlexLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream        *os    = NULL)
    :
      FlexLexer(input, os)
  {
  }
  virtual int yylex();
  int yylex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return yylex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "restorer.l"


#include <stdio.h>
#include <syslog.h>
#include "y.tab.h"

char s[80]="";
char k[80]="";



////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON                                                                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

yyFlexLexer YY_SCANNER;

#ifndef YY_EXTERN_C
#define YY_EXTERN_C
#endif

char *yytext;
yy_size_t yyleng;
int yylineno;

YY_EXTERN_C int yylex(void)
{
  int ret = YY_SCANNER.yylex();
  yytext = const_cast<char*>(YY_SCANNER.YYText());
  yyleng = static_cast<yy_size_t>(YY_SCANNER.YYLeng());
  yylineno = static_cast<int>(YY_SCANNER.lineno());
  return ret;
}

#define yytext const_cast<char*>(YY_SCANNER.YYText())
#define yyleng static_cast<yy_size_t>(YY_SCANNER.YYLeng())
#define yylineno static_cast<int>(YY_SCANNER.lineno())

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int yyFlexLexer::yylex()
{
  static const char *REGEX_INITIAL = "(?m)(^Queue)|(^Engine)|(^(?:Analysis))|((?:Head|Current|Tail))|((?:BlackSide|WhiteSide|Pending|Complete))|((?:WebUser|Game|Line|Depth|Queue))|([0-9A-Fa-f]{8})|([0-9A-Fa-f]{32})|([0-9A-Fa-f]{8}-(?:[0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12})|((?:REQUESTED_BY|REQUESTED_FOR|PERFORMED_ON|QUEUED|FIRST|LAST|REQUIRED_DEPTH))|([\\x0a])|([\\x20])|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    YY_USER_INIT
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              output(matcher().input());
            }
            YY_BREAK
          case 1: // rule at line 18: ^Queue
            YY_USER_ACTION
#line 18 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read :Queue node: %s", yytext);
            return(QUEUE_NODE);
	}
            YY_BREAK
          case 2: // rule at line 22: ^Engine
            YY_USER_ACTION
#line 22 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read :Engine node: %s", yytext);
            return(ENGINE_NODE);
	}
            YY_BREAK
          case 3: // rule at line 26: ^(?:Analysis)
            YY_USER_ACTION
#line 26 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read :Analysis node: %s", yytext);
            return(ANALYSIS_NODE);
	}
            YY_BREAK
          case 4: // rule at line 30: (?:Head|Current|Tail)
            YY_USER_ACTION
#line 30 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read :Queue label: %s", yytext);
            strcpy(s, yytext);
	    yylval.s = s;
            return(QUEUE_LABEL);
	}
            YY_BREAK
          case 5: // rule at line 36: (?:BlackSide|WhiteSide|Pending|Complete)
            YY_USER_ACTION
#line 36 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read :Analysis label: %s", yytext);
            strcpy(s, yytext);
	    yylval.s = s;
            return(ANALYSIS_LABEL);
	}
            YY_BREAK
          case 6: // rule at line 42: (?:WebUser|Game|Line|Depth|Queue)
            YY_USER_ACTION
#line 42 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read label: %s", yytext);
            strcpy(s, yytext);
	    yylval.s = s;
            return(LABEL);
	}
            YY_BREAK
          case 7: // rule at line 48: [0-9A-Fa-f]{8}
            YY_USER_ACTION
#line 48 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read :Line hash: %s", yytext);
            strcpy(s, yytext);
	    yylval.s = s;
            return(LINE_HASH);
	}
            YY_BREAK
          case 8: // rule at line 54: [0-9A-Fa-f]{32}
            YY_USER_ACTION
#line 54 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read :Game hash: %s", yytext);
            strcpy(s, yytext);
	    yylval.s = s;
            return(GAME_HASH);
	}
            YY_BREAK
          case 9: // rule at line 60: [0-9A-Fa-f]{8}-(?:[0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}
            YY_USER_ACTION
#line 60 "restorer.l"
{
// bd4007d7-9df3-400a-a25c-01012ef46f29
	    syslog( LOG_DEBUG, "Read UUID: %s", yytext);
            strcpy(s, yytext);
	    yylval.s = s;
            return(UUID);
	}
            YY_BREAK
          case 10: // rule at line 67: (?:REQUESTED_BY|REQUESTED_FOR|PERFORMED_ON|QUEUED|FIRST|LAST|REQUIRED_DEPTH)
            YY_USER_ACTION
#line 67 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read analysis relationship: %s", yytext);
            strcpy(s, yytext);
	    yylval.s = s;
            return(ANALYSIS_REL);
	}
            YY_BREAK
          case 11: // rule at line 73: [\x0a]
            YY_USER_ACTION
#line 73 "restorer.l"
{
	    syslog( LOG_DEBUG, "Read new line");
            strcpy(k, yytext);
	    yylval.k = k;
            return(NEWLINE);
	}
            YY_BREAK
          case 12: // rule at line 79: [\x20]
            YY_USER_ACTION
#line 79 "restorer.l"
{
//	    syslog( LOG_DEBUG, "Read space");
//          return(SPACE);
	}
            YY_BREAK
          case 13: // rule at line 83: .
            YY_USER_ACTION
#line 83 "restorer.l"
{ // Garbage
	    syslog( LOG_DEBUG, "???: %s", yytext);
	}
            YY_BREAK
        }
  }
}
